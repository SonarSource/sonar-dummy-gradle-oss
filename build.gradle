plugins {
  id 'com.github.hierynomus.license' version '0.16.1'
  id 'signing'
  id "com.jfrog.artifactory" version "4.26.1"
  id "org.cyclonedx.bom" version "1.5.0"
  id "org.sonarqube" version "5.0.0.4638"
}

// Analyze with SonarQube!
sonarqube {
  properties {
    property 'sonar.projectName', 'sonar-dummy-gradle-oss'
    property 'sonar.projectKey', 'SonarSource_sonar-dummy-gradle-oss'
    property 'sonar.organization', 'sonarsource'
  }
}

allprojects {
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'maven-publish'
  apply plugin: "org.cyclonedx.bom"

  // Replaces the version defined in sources, usually x.y-SNAPSHOT, by a version identifying the build.
  def buildNumber = System.getProperty("buildNumber")
  if (version.endsWith('-SNAPSHOT') && buildNumber != null) {
    version = version.replace('-SNAPSHOT', ".0.$buildNumber")
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url System.env.'ARTIFACTORY_URL' + '/sonarsource'
    }
  }

  signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    required {
      return gradle.taskGraph.hasTask(":artifactoryPublish")
    }
    sign publishing.publications
  }

  tasks.withType(Sign) {
    onlyIf {
      return !artifactoryPublish.skip && gradle.taskGraph.hasTask(":artifactoryPublish")
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: "jacoco"
  apply plugin: 'com.github.hierynomus.license'

  java {
    withJavadocJar()
    withSourcesJar()
  }

  compileJava {
    options.release = 8
    options.encoding = 'UTF-8'
  }

  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  license {
    header = rootProject.file('HEADER')
    strictCheck true
    mapping {
      java = 'SLASHSTAR_STYLE'
    }
    includes(['**/*.java'])
  }

  def bomFile = layout.buildDirectory.file('reports/bom.json')
  cyclonedxBom {
    outputs.file bomFile
  }
  def bomArtifact = artifacts.add('archives', bomFile.get().asFile) {
    type 'json'
    classifier 'cyclonedx'
    builtBy 'cyclonedxBom'
  }
  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifact bomArtifact
      }
    }
  }
}

artifactory {
  clientConfig.setIncludeEnvVars(true)
  clientConfig.setEnvVarsExcludePatterns('*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*,*signing*')
  contextUrl = System.getenv('ARTIFACTORY_URL')
  publish {
    repository {
      repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
      username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME')
      password = System.getenv('ARTIFACTORY_DEPLOY_ACCESS_TOKEN')
    }
    defaults {
      properties = [
        'build.name'      : 'sonar-dummy-gradle-oss',
        'build.number'    : System.getenv('BUILD_NUMBER'),
        'pr.branch.target': System.getenv('PULL_REQUEST_BRANCH_TARGET'),
        'pr.number'       : System.getenv('PULL_REQUEST_NUMBER'),
        'vcs.branch'      : System.getenv('GIT_BRANCH'),
        'vcs.revision'    : System.getenv('GIT_COMMIT'),
        'version'         : version
      ]
      publications('mavenJava')
      publishPom = true
      publishIvy = false
    }
    clientConfig.info.addEnvironmentProperty('ARTIFACTS_TO_PUBLISH', 'org.sonarsource.dummy:sonar-dummy-gradle-oss-plugin:jar,org.sonarsource.dummy:sonar-dummy-gradle-oss-plugin:json:cyclonedx')
  }

  clientConfig.info.setBuildName('sonar-dummy-gradle-oss')
  clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))
  // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.
  clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', "${version}")
}
